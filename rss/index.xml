<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Marko Kunic]]></title><description><![CDATA[Web Developer]]></description><link>https://kunicmarko20.github.io</link><generator>RSS for Node</generator><lastBuildDate>Fri, 05 May 2017 14:21:37 GMT</lastBuildDate><atom:link href="https://kunicmarko20.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Sonata Admin Custom Export Format]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://sonata-project.org/bundles/admin/3-x/doc/index.html">Sonata Admin</a> is Admin Generator for <a href="https://symfony.com/">Symfony</a>, and it is something that I use on almost every project. In this post, I will explain how to add an option for export to Sonata Admin. As you already know Sonata Admin has default exports formats (xls, xml, json, csv) but I needed one more, I needed to export to never version of excel (Excel2007).</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
You can take parts that you need and create a new export to something else, but this is the best way I found to do this.
</td>
</tr>
</table>
</div>
<hr>
<div class="paragraph">
<p><strong>TL;DR</strong>: Code for this can be found <a href="https://gist.github.com/kunicmarko20/e0292280344761efbc7ff376f7080fec">here</a>.</p>
</div>
<hr>
</div>
</div>
<div class="sect1">
<h2 id="_what_are_we_going_to_do">What are we going to do ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Following the example of current <a href="https://github.com/sonata-project/exporter/tree/1.x/src/Writer">Sonata Exporter Writers</a> we need to create a custom writer, we need to overwrite <a href="https://github.com/sonata-project/SonataCoreBundle/blob/3.x/Exporter/Exporter.php">Sonata Exporter</a> from <a href="https://github.com/sonata-project/SonataCoreBundle">SonataCoreBundle</a> with our own and we need to edit our AdminClass to accept new type.</p>
</div>
<div class="paragraph">
<p>For this example we will also need <a href="https://github.com/PHPOffice/PHPExcel">PHPOffice/PHPExcel</a> so add it with composer :</p>
</div>
<div class="listingblock">
<div class="content">
<pre>composer require phpoffice/phpexcel</pre>
</div>
</div>
<div class="sect2">
<h3 id="_xlsxwriter">XlsxWriter</h3>
<div class="paragraph">
<p>After looking at other Writers (<a href="https://github.com/sonata-project/exporter/blob/1.x/src/Writer/XlsWriter.php">XlsWriter</a>, <a href="https://github.com/sonata-project/exporter/blob/1.x/src/Writer/CsvWriter.php">CsvWriter</a> &#8230;&#8203;) this is the code I created for our new <code><strong>xlsx</strong></code> export:</p>
</div>
<div id="app-listing" class="listingblock">
<div class="title">XlsxWriter.php</div>
<div class="content">
<pre class="highlight"><code class="language-php" data-lang="php">&lt;?php

namespace AppBundle\Exporter\Writer;

use Exporter\Writer\TypedWriterInterface;
use PHPExcel_IOFactory;
use PHPExcel;
use PHPExcel_Style_Alignment;

class XlsxWriter implements TypedWriterInterface
{
    const LABEL_COLUMN = 1;
    /** @var  PHPExcel */
    private $phpExcelObject;
    /** @var array */
    private $headerColumns = [];
    /** @var  string */
    private $filename;
    /** @var int */
    protected $position;

    public function __construct($filename)
    {
        $this-&gt;filename = $filename;
        $this-&gt;position = 2;
    }

    public function getDefaultMimeType()
    {
        return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }

    public function getFormat()
    {
        return 'xlsx';
    }

    /**
     * Create PHPExcel object and set defaults
     */
    public function open()
    {
        $this-&gt;phpExcelObject = new PHPExcel();
    }
    /**
     * {@inheritdoc}
     */
    public function write(array $data)
    {
        $this-&gt;init($data);
        foreach ($data as $header =&gt; $value) {
            $this-&gt;setCellValue($this-&gt;getColumn($header), $value);
        }
        ++$this-&gt;position;
    }
    /**
     *  Set labels
     * @param $data
     *
     * @return void
     */
    protected function init($data)
    {
        if ($this-&gt;position &gt; 2) {
            return;
        }
        $i = 0;
        foreach ($data as $header =&gt; $value) {
            $column = self::formatColumnName($i);
            $this-&gt;setHeader($column, $header);
            $i++;
        }
        $this-&gt;setBoldLabels();
    }
    /**
     * Save Excel file
     */
    public function close()
    {
        $writer = PHPExcel_IOFactory::createWriter($this-&gt;phpExcelObject, 'Excel2007');
        $writer-&gt;save($this-&gt;filename);
    }
    /**
     * Returns letter for number based on Excel columns
     * @param int $number
     * @return string
     */
    public static function formatColumnName($number)
    {
        for ($char = ""; $number &gt;= 0; $number = intval($number / 26) - 1) {
            $char = chr($number%26 + 0x41) . $char;
        }
        return $char;
    }
    /**
     * @return \PHPExcel_Worksheet
     */
    private function getActiveSheet()
    {
        return $this-&gt;phpExcelObject-&gt;getActiveSheet();
    }
    /**
     * Makes header bold
     */
    private function setBoldLabels()
    {
        $this-&gt;getActiveSheet()-&gt;getStyle(
            sprintf(
                "%s1:%s1",
                reset($this-&gt;headerColumns),
                end($this-&gt;headerColumns)
            )
        )-&gt;getFont()-&gt;setBold(true);
    }
    /**
     * Sets cell value
     * @param string $column
     * @param string $value
     */
    private function setCellValue($column, $value)
    {
        $this-&gt;getActiveSheet()-&gt;setCellValue($column, $value);
    }
    /**
     * Set column label and make column auto size
     * @param string $column
     * @param string $value
     */
    private function setHeader($column, $value)
    {
        $this-&gt;setCellValue($column.self::LABEL_COLUMN, $value);
        $this-&gt;getActiveSheet()-&gt;getColumnDimension($column)-&gt;setAutoSize(true);
        $this-&gt;headerColumns[$value] = $column;
    }
    /**
     * Get column name
     * @param string $name
     * @return string
     */
    private function getColumn($name)
    {
        return $this-&gt;headerColumns[$name].$this-&gt;position;
    }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_exporter">Exporter</h3>
<div class="paragraph">
<p>We will copy code from <a href="https://github.com/sonata-project/SonataCoreBundle/blob/3.x/Exporter/Exporter.php">Sonata Exporter</a> and only add our new option to switch statement:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-php" data-lang="php">case 'xlsx':
    $writer = new XlsxWriter('php://output');
    $contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    break;</code></pre>
</div>
</div>
<div class="paragraph">
<p>So our Exporter now looks like:</p>
</div>
<div id="app-listing" class="listingblock">
<div class="title">Exporter.php</div>
<div class="content">
<pre class="highlight"><code class="language-php" data-lang="php">&lt;?php

namespace AppBundle\Exporter;

use Sonata\CoreBundle\Exporter\Exporter as BaseExporter;
use Exporter\Source\SourceIteratorInterface;
use AppBundle\Exporter\Writer\XlsxWriter;
use Exporter\Writer\XlsWriter;
use Exporter\Writer\XmlWriter;
use Exporter\Writer\JsonWriter;
use Exporter\Writer\CsvWriter;
use Exporter\Handler;
use Symfony\Component\HttpFoundation\StreamedResponse;

class Exporter extends BaseExporter
{
 /**
     * @throws \RuntimeException
     *
     * @param string                  $format
     * @param string                  $filename
     * @param SourceIteratorInterface $source
     *
     * @return StreamedResponse
     */
    public function getResponse($format, $filename, SourceIteratorInterface $source)
    {
        switch ($format) {
            case 'xls':
                $writer = new XlsWriter('php://output');
                $contentType = 'application/vnd.ms-excel';
                break;
            case 'xml':
                $writer = new XmlWriter('php://output');
                $contentType = 'text/xml';
                break;
            case 'json':
                $writer = new JsonWriter('php://output');
                $contentType = 'application/json';
                break;
            case 'csv':
                $writer = new CsvWriter('php://output', ',', '"', '', true, true);
                $contentType = 'text/csv';
                break;
            case 'xlsx':
                $writer = new XlsxWriter('php://output');
                $contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
                break;
            default:
                throw new \RuntimeException('Invalid format');
        }
        $callback = function () use ($source, $writer) {
            $handler = Handler::create($source, $writer);
            $handler-&gt;export();
        };
        return new StreamedResponse($callback, 200, array(
            'Content-Type' =&gt; $contentType,
            'Content-Disposition' =&gt; sprintf('attachment; filename="%s"', $filename),
        ));
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>We also have to overwrite service that sonata declared with our class:</p>
</div>
<div id="app-listing" class="listingblock">
<div class="title">services.yml</div>
<div class="content">
<pre class="highlight"><code class="language-yml" data-lang="yml">services:
    sonata.admin.exporter:
        class: AppBundle\Exporter\Exporter</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_admin_class">Admin Class</h3>
<div class="paragraph">
<p>The only thing that is left is to add a new option to our Admin Class and set fields for export:</p>
</div>
<div id="app-listing" class="listingblock">
<div class="title">YourAdmin.php</div>
<div class="content">
<pre class="highlight"><code class="language-php" data-lang="php">&lt;?php

namespace AppBundle\Admin;

use Sonata\AdminBundle\Admin\AbstractAdmin;
//...

class YourAdmin extends AbstractAdmin
{
    //...
    public function getExportFormats()
    {
        return ['xlsx', 'xls', 'csv', 'json', 'xml'];
    }
    //optional, if not set Sonata will take all variables
    public function getExportFields()
    {
        return array(
            $this-&gt;trans('export.createdAt') =&gt; 'createdAt',
            $this-&gt;trans('export.id') =&gt; 'id'
            // add your fields with or without translations
        );
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>That is it, run it and try new export option, I hope this helps someone with this problem.</p>
</div>
</div>
</div>
</div>]]></description><link>https://kunicmarko20.github.io/2017/05/05/Sonata-Admin-Custom-Export-Format.html</link><guid isPermaLink="true">https://kunicmarko20.github.io/2017/05/05/Sonata-Admin-Custom-Export-Format.html</guid><category><![CDATA[Symfony]]></category><category><![CDATA[Sonata Admin]]></category><category><![CDATA[Sonata Admin Exporter]]></category><category><![CDATA[Custom Exporter]]></category><dc:creator><![CDATA[Marko Kunic]]></dc:creator><pubDate>Fri, 05 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Clone/Duplicate Node with Paragraphs field in Drupal 8]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Cloning/Duplicating Nodes in Drupal is easy, just get some module that does that for you and you are ready but the problem is when you are using Drupal 8 and there is no stable module or they are still not ported to Drupal 8. I had this problem, so I had to find some kind of solution. You can check my short answer on <a href="https://drupal.stackexchange.com/a/230035">stackoverflow</a> or continue reading this.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
At the time of this writing, there is still no stable modules for cloning.
</td>
</tr>
</table>
</div>
<hr>
<div class="paragraph">
<p><strong>TL;DR</strong>: Code for this can be found <a href="https://gist.github.com/kunicmarko20/d1fcb622bda26f9707f6ff96297f2090">here</a>.</p>
</div>
<hr>
<div class="paragraph">
<p>What if we add <a href="https://www.drupal.org/project/paragraphs">Paragraphs module</a>? Great solution for page builder in Drupal, be sure to check it out. I will explain how to create clones of your Nodes with or without Paragraphs.</p>
</div>
<div class="paragraph">
<p>We will create a custom module that will add an option to our content listing for cloning.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_custom_module">Custom Module</h2>
<div class="sectionbody">
<div class="paragraph">
<p>So we will create a custom module with name '<strong>clone_nodes</strong>' in the modules directory.</p>
</div>
<div id="app-listing" class="listingblock">
<div class="title">clone_nodes.info.yml</div>
<div class="content">
<pre class="highlight"><code class="language-yml" data-lang="yml">name: Clone Nodes
description: 'Creates clone of node.'
type: module
core: 8.x
package: Custom</code></pre>
</div>
</div>
<div id="app-listing" class="listingblock">
<div class="title">clone_nodes.routing.yml</div>
<div class="content">
<pre class="highlight"><code class="language-yml" data-lang="yml">clone_nodes:
    path: '/cnodes/node/{id}/clone'
    defaults:
        _controller: '\Drupal\clone_nodes\Controller\CloneController::clone'
    requirements:
        _permission: 'access content'</code></pre>
</div>
</div>
<div id="app-listing" class="listingblock">
<div class="title">clone_nodes.module</div>
<div class="content">
<pre class="highlight"><code class="language-php" data-lang="php">&lt;?php

function clone_nodes_pages_entity_operation(\Drupal\Core\Entity\EntityInterface $entity)
{

    $operations = [];

    if ($entity instanceof \Drupal\node\Entity\Node) {
        $operations['clone'] = [
          'title' =&gt; t('Clone'),
          'url' =&gt; \Drupal\Core\Url::fromRoute('clone_nodes',['id' =&gt; $entity-&gt;id()]),
          'weight' =&gt; 150,
        ];
    }

    return $operations;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now we only need the Controller and that will be different if you are using paragraphs or not.</p>
</div>
<div class="sect2">
<h3 id="_controller_without_paragraphs">Controller without Paragraphs</h3>
<div class="paragraph">
<p>After searching for this solution I found that Drupal 8 Entity API has <a href="https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21Entity.php/function/Entity%3A%3AcreateDuplicate/8.2.x">createDuplicate method</a> so I used that.</p>
</div>
<div id="app-listing" class="listingblock">
<div class="title">CloneController.php</div>
<div class="content">
<pre class="highlight"><code class="language-php" data-lang="php">&lt;?php
namespace Drupal\clone_nodes\Controller;

use Drupal\Core\Controller\ControllerBase;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\node\Entity\Node;

class CloneController extends ControllerBase
{

    public function clone($id)
    {
        $node = Node::load($id);
        if ($node === null) {
            drupal_set_message(t('Node with id @id does not exist.', ['@id' =&gt; $id]), 'error');
        } else {

            $nodeDuplicate = $node-&gt;createDuplicate();
            //edit title or something so you can find cloned
            $nodeDuplicate-&gt;save();

            drupal_set_message(
            	t("Node has been created. &lt;a href='/node/@id/edit' target='_blank'&gt;Edit now&lt;/a&gt;", [
                  '@id' =&gt; $nodeDuplicate-&gt;id(),
                  '@title' =&gt; $nodeDuplicate-&gt;getTitle()]
            	 ), 'status');
        }

        return new RedirectResponse('/admin/content');
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>When you create duplicate of node you can edit title or something so you can distinguish original from cloned, but the only difference that I saw was that cloned Node doesn&#8217;t have alias url becuase that stays bound to original.</p>
</div>
</div>
<div class="sect2">
<h3 id="_controller_with_paragraphs">Controller with Paragraphs</h3>
<div class="paragraph">
<p>The only difference is that you have to duplicate every paragraphs field that is connected to node, so we will just add this part of code :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-php" data-lang="php">foreach ($nodeDuplicate-&gt;field_paragraphs as $field) {
    $field-&gt;entity = $field-&gt;entity-&gt;createDuplicate();
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code><strong>field_paragraphs</strong></code> is machine name I used for my paragraphs field in Content Type, be sure to changed it to match yours.</p>
</div>
<div class="paragraph">
<p>So our Controller now looks like :</p>
</div>
<div id="app-listing" class="listingblock">
<div class="title">CloneController.php</div>
<div class="content">
<pre class="highlight"><code class="language-php" data-lang="php">&lt;?php
namespace Drupal\clone_nodes\Controller;

use Drupal\Core\Controller\ControllerBase;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\node\Entity\Node;

class CloneController extends ControllerBase
{

    public function clone($id)
    {
        $node = Node::load($id);
        if ($node === null) {
            drupal_set_message(t('Node with id @id does not exist.', ['@id' =&gt; $id]), 'error');
        } else {

            $nodeDuplicate = $node-&gt;createDuplicate();

            foreach ($nodeDuplicate-&gt;field_paragraphs as $field) {
                $field-&gt;entity = $field-&gt;entity-&gt;createDuplicate();
            }

            //edit title or something so you can find cloned
            $nodeDuplicate-&gt;save();

            drupal_set_message(
            	t("Node has been created. &lt;a href='/node/@id/edit' target='_blank'&gt;Edit now&lt;/a&gt;", [
                  '@id' =&gt; $nodeDuplicate-&gt;id(),
                  '@title' =&gt; $nodeDuplicate-&gt;getTitle()]
            	 ), 'status');
        }

        return new RedirectResponse('/admin/content');
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>I hope this helps someone with this problem and until some old clone module is ported to Drupal 8 I guess this will have to do it.</p>
</div>
</div>
</div>
</div>]]></description><link>https://kunicmarko20.github.io/2017/05/04/Clone-Duplicate-Node-with-Paragraphs-field-in-Drupal-8.html</link><guid isPermaLink="true">https://kunicmarko20.github.io/2017/05/04/Clone-Duplicate-Node-with-Paragraphs-field-in-Drupal-8.html</guid><category><![CDATA[Drupal]]></category><category><![CDATA[Drupal8]]></category><category><![CDATA[Paragraphs]]></category><category><![CDATA[Duplicate Node]]></category><category><![CDATA[Node Clone]]></category><dc:creator><![CDATA[Marko Kunic]]></dc:creator><pubDate>Thu, 04 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Intro]]></title><description><![CDATA[<div class="paragraph">
<p>As you already know, my name is Marko Kunic. Currently I am a PHP developer working with Symfony, Wordpress and Drupal, so for now you can expect my blog posts to be related to that and anything that pops in between. Through time, I encountered the problems where stackoverflow didn&#8217;t have a solution and a lot of google pages after I find some random blog that has a solution. To contribute back my goal is to post about solutions that wasted my time so hopefully the next person that has the same problem runs into this blog and finds what they were looking for.</p>
</div>]]></description><link>https://kunicmarko20.github.io/2017/05/03/Intro.html</link><guid isPermaLink="true">https://kunicmarko20.github.io/2017/05/03/Intro.html</guid><category><![CDATA[About]]></category><category><![CDATA[Intro]]></category><dc:creator><![CDATA[Marko Kunic]]></dc:creator><pubDate>Wed, 03 May 2017 00:00:00 GMT</pubDate></item></channel></rss>